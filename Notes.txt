#region Init WarmStarting

			List<CollisionPointStructure> collisionPointsBuffer = null;

			if (collisionPoints != null &&
				collisionPoints.Count > 0)
			{
				collisionPointsBuffer = new List<CollisionPointStructure>(collisionPoints);
			}

			#endregion



if (collisionPointsBuffer != null &&
			    collisionPointsBuffer.Count > 0)
				WarmStarting (collisionPointsBuffer);


private void WarmStarting(
			List<CollisionPointStructure> collisionPointsBuffer)
		{
			foreach(CollisionPointStructure cPoint in collisionPointsBuffer)
			{
				//TODO Work in progress
				int pointBufferIndex = collisionPoints.FindIndex (
					                  x => (x.ObjectA == cPoint.ObjectA &&
						                    x.ObjectB == cPoint.ObjectB) ||
						                   (x.ObjectA == cPoint.ObjectB &&
						                    x.ObjectB == cPoint.ObjectA));

				if (pointBufferIndex > -1)
				{
					CollisionPointStructure pointBuffer = collisionPoints[pointBufferIndex];

					if ((Vector3.Length(cPoint.CollisionPoint.CollisionPointA -
								pointBuffer.CollisionPoint.CollisionPointA) < 0.001 &&
						Vector3.Length(cPoint.CollisionPoint.CollisionPointB -
								pointBuffer.CollisionPoint.CollisionPointB) < 0.001) ||
						(Vector3.Length(cPoint.CollisionPoint.CollisionPointA -
								pointBuffer.CollisionPoint.CollisionPointB) < 0.001 &&
						Vector3.Length(cPoint.CollisionPoint.CollisionPointB -
									   pointBuffer.CollisionPoint.CollisionPointA) < 0.001))
					{
						collisionPoints[pointBufferIndex].CollisionPoint = cPoint.CollisionPoint;
						collisionPoints[pointBufferIndex].CollisionPoints = cPoint.CollisionPoints;
					}

					//for (int i = 0; i < pointBuffer.CollisionPoints.Count(); i++)
					//{
					//	int ppBuffer = cPoint.CollisionPoints.ToList().FindIndex(x => Math.Acos(x.CollisionNormal.Dot(pointBuffer.CollisionPoints[i].CollisionNormal))< 0.01 &&
					//																	(Vector3.Length(x.CollisionPointA -
					//																			pointBuffer.CollisionPoints[i].CollisionPointA) < 0.001 &&
					//																	Vector3.Length(x.CollisionPointB -
					//																			pointBuffer.CollisionPoints[i].CollisionPointB) < 0.001) ||
					//																	(Vector3.Length(x.CollisionPointA -
					//																			pointBuffer.CollisionPoints[i].CollisionPointB) < 0.001 &&
					//																	Vector3.Length(x.CollisionPointB -
				 //                                                                               pointBuffer.CollisionPoints[i].CollisionPointA) < 0.001));

					//	if (ppBuffer > -1)
					//	{
					//		//collisionPoints[pointBufferIndex].CollisionPoints = cPoint.CollisionPoints;
					//		collisionPoints[pointBufferIndex].CollisionPoints[i].StartImpulseValue[0].SetStartValue(cPoint.CollisionPoints[ppBuffer].StartImpulseValue[0].StartImpulseValue);
					//		collisionPoints[pointBufferIndex].CollisionPoints[i].StartImpulseValue[1].SetStartValue(cPoint.CollisionPoints[ppBuffer].StartImpulseValue[1].StartImpulseValue);
					//		collisionPoints[pointBufferIndex].CollisionPoints[i].StartImpulseValue[2].SetStartValue(cPoint.CollisionPoints[ppBuffer].StartImpulseValue[2].StartImpulseValue);
					//	}
					//}
				}
			}
		}