#region Init WarmStarting

			List<CollisionPointStructure> collisionPointsBuffer = null;

			if (collisionPoints != null &&
				collisionPoints.Count > 0)
			{
				collisionPointsBuffer = new List<CollisionPointStructure>(collisionPoints);
			}

			#endregion



if (collisionPointsBuffer != null &&
			    collisionPointsBuffer.Count > 0)
				WarmStarting (collisionPointsBuffer);


private void WarmStarting(
			List<CollisionPointStructure> collisionPointsBuffer)
		{
			foreach(CollisionPointStructure cPoint in collisionPointsBuffer)
			{
				//TODO Work in progress
				int pointBufferIndex = collisionPoints.FindIndex (
					                  x => (x.ObjectA == cPoint.ObjectA &&
						                    x.ObjectB == cPoint.ObjectB) ||
						                   (x.ObjectA == cPoint.ObjectB &&
						                    x.ObjectB == cPoint.ObjectA));

				if (pointBufferIndex > -1)
				{
					CollisionPointStructure pointBuffer = collisionPoints[pointBufferIndex];

					if ((Vector3.Length(cPoint.CollisionPoint.CollisionPointA -
								pointBuffer.CollisionPoint.CollisionPointA) < 0.001 &&
						Vector3.Length(cPoint.CollisionPoint.CollisionPointB -
								pointBuffer.CollisionPoint.CollisionPointB) < 0.001) ||
						(Vector3.Length(cPoint.CollisionPoint.CollisionPointA -
								pointBuffer.CollisionPoint.CollisionPointB) < 0.001 &&
						Vector3.Length(cPoint.CollisionPoint.CollisionPointB -
									   pointBuffer.CollisionPoint.CollisionPointA) < 0.001))
					{
						collisionPoints[pointBufferIndex].CollisionPoint = cPoint.CollisionPoint;
						collisionPoints[pointBufferIndex].CollisionPoints = cPoint.CollisionPoints;
					}

					//for (int i = 0; i < pointBuffer.CollisionPoints.Count(); i++)
					//{
					//	int ppBuffer = cPoint.CollisionPoints.ToList().FindIndex(x => Math.Acos(x.CollisionNormal.Dot(pointBuffer.CollisionPoints[i].CollisionNormal))< 0.01 &&
					//																	(Vector3.Length(x.CollisionPointA -
					//																			pointBuffer.CollisionPoints[i].CollisionPointA) < 0.001 &&
					//																	Vector3.Length(x.CollisionPointB -
					//																			pointBuffer.CollisionPoints[i].CollisionPointB) < 0.001) ||
					//																	(Vector3.Length(x.CollisionPointA -
					//																			pointBuffer.CollisionPoints[i].CollisionPointB) < 0.001 &&
					//																	Vector3.Length(x.CollisionPointB -
				 //                                                                               pointBuffer.CollisionPoints[i].CollisionPointA) < 0.001));

					//	if (ppBuffer > -1)
					//	{
					//		//collisionPoints[pointBufferIndex].CollisionPoints = cPoint.CollisionPoints;
					//		collisionPoints[pointBufferIndex].CollisionPoints[i].StartImpulseValue[0].SetStartValue(cPoint.CollisionPoints[ppBuffer].StartImpulseValue[0].StartImpulseValue);
					//		collisionPoints[pointBufferIndex].CollisionPoints[i].StartImpulseValue[1].SetStartValue(cPoint.CollisionPoints[ppBuffer].StartImpulseValue[1].StartImpulseValue);
					//		collisionPoints[pointBufferIndex].CollisionPoints[i].StartImpulseValue[2].SetStartValue(cPoint.CollisionPoints[ppBuffer].StartImpulseValue[2].StartImpulseValue);
					//	}
					//}
				}
			}
		}


//private double[] ExecuteSolver(
        //    JacobianConstraint[] jacobianConstraints)
        //{            
        //    switch(solverType)
        //    {
        //        case SolverType.ProjectedConjugateGradient:
        //            return ExecuteProjectedConjugateGradient(jacobianConstraints);
                    
        //    }
        //    return null;
        //}

        private double[] ExecuteProjectedConjugateGradient(
            CollisionPointStructure[] collisionPointsStruct,
            List<IConstraint> simulationJointList,
            IShape[] simulationObjs,
            PhysicsEngineParameters simulationParameters)
        {
            JacobianConstraint[] jacobianConstraints = GetJacobianConstraints(
                                                                        collisionPointsStruct,
                                                                        simulationJointList,
                                                                        Shapes,
                                                                        EngineParameters);

            LinearProblemProperties globalLP = GetGlobalLinearProblem(jacobianConstraints);
            LinearProblemProperties contactLP = GetContactLCP(jacobianConstraints);
            LinearProblemProperties jointLP = GetJointsLinearProblem(jacobianConstraints);
            LinearProblemProperties jointWhitLimitLP = GetJointsWithLimitLinearProblem(jacobianConstraints);

            //if (startValues == null)
            //    startValues = new double[globalLP.Count];

            double[] x = new double[globalLP.Count];
            double[] xOld = new double[globalLP.Count];
            double[] xJoint = new double[(jointLP != null) ? jointLP.Count : 0];
            double[] xContact = new double[(contactLP != null) ? contactLP.Count : 0];
            double[] xJointWithLimit = new double[(jointWhitLimitLP != null) ? jointWhitLimitLP.Count : 0];

            var CGSolver = new SharpEngineMathUtility.Solver.ConjugateGradient();

            var gaussSeidelSolverParam = new SolverParameters(
                                                          10,
                                                          SolverParameters.ErrorTolerance,
                                                          1.0,
                                                          SolverParameters.MaxThreadNumber);

            var PGS = new ProjectedGaussSeidel(gaussSeidelSolverParam);

            SparseMatrix A = new SparseMatrix();

            if (jointLP != null)
            {
                A = jointLP.GetOriginalSparseMatrix();
            }

            for (int i = 0; i < 10; i++)
            {
                //Solve Contact
                if (contactLP != null)
                {
                    xContact = PGS.Solve(contactLP, xContact);
                    x = SetGlobalValues(globalLP.ConstraintType, x, xJoint, xContact, xJointWithLimit);
                    IntegrateVelocityEngine.UpdateVelocity(jacobianConstraints, x);
                    jacobianConstraints = GetJacobianConstraints(
                                                            collisionPointsStruct,
                                                            simulationJointList,
                                                            Shapes,
                                                            EngineParameters);

                    globalLP = GetGlobalLinearProblem(jacobianConstraints);
                }

                //Set Values
                //x = SetGlobalValues(globalLP.ConstraintType, x, xJoint, xContact, xJointWithLimit);

                //Solve Global LP
                //globalLP = GetGlobalLinearProblem(jacobianConstraints);
                x = PGS.Solve(globalLP, x);
                //SetValues
                SetSubsystemValues(globalLP.ConstraintType, x, ref xJoint, ref xContact, ref xJointWithLimit);

                IntegrateVelocityEngine.UpdateVelocity(jacobianConstraints, x);
                jacobianConstraints = GetJacobianConstraints(
                                                        collisionPointsStruct,
                                                        simulationJointList,
                                                        Shapes,
                                                        EngineParameters);

                //globalLP = GetGlobalLinearProblem(jacobianConstraints);

                //Solve Joint 
                if (jointLP != null)
                {
                    jointLP = GetJointsLinearProblem(jacobianConstraints);
                    xJoint = CGSolver.Solve(A, jointLP.B, xJoint, 20);
                    IntegrateVelocityEngine.UpdateVelocity(jacobianConstraints, x);
                    jacobianConstraints = GetJacobianConstraints(
                                                            collisionPointsStruct,
                                                            simulationJointList,
                                                            Shapes,
                                                            EngineParameters);

                }

                //Solve Joint With Limit
                if (jointWhitLimitLP != null)
                {
                    //SetValues
                    //SetSubsystemValues(globalLP.ConstraintType, x, ref xJoint, ref xContact, ref xJointWithLimit);
                    jointWhitLimitLP = GetJointsWithLimitLinearProblem(jacobianConstraints);
                    xJointWithLimit = PGS.Solve(jointWhitLimitLP, xJointWithLimit);

                    x = SetGlobalValues(globalLP.ConstraintType, x, xJoint, xContact, xJointWithLimit);

                    IntegrateVelocityEngine.UpdateVelocity(jacobianConstraints, x);
                    jacobianConstraints = GetJacobianConstraints(
                                                            collisionPointsStruct,
                                                            simulationJointList,
                                                            Shapes,
                                                            EngineParameters);
                }

                //SetValues
                //SetSubsystemValues(globalLP.ConstraintType, x, ref xJoint, ref xContact, ref xJointWithLimit);

                double actualSolverError = SolverHelper.ComputeSolverError(x, xOld);

                if (actualSolverError < SolverParameters.ErrorTolerance)
                    return x;

                Array.Copy(x, xOld, x.Length);
            }


            return x;
        }



/******************************************************************************
 *
 * The MIT License (MIT)
 *
 * PhysicsEngine, Copyright (c) 2018 Pieter Marius van Duin
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *  
 *****************************************************************************/


using System.Collections.Generic;

namespace SharpEngineMathUtility.Solver
{
    public sealed class LUSolver
    {

        #region Constructor

        public LUSolver()
        { }

        #endregion

        #region Public Methods

        public double[] Solve(SparseMatrix A, double[] b, out bool valid)
        {
            double[,] lu = new double[A.n, A.n];
            SparseMatrix lower = new SparseMatrix(A.n, A.n);
            SparseMatrix upper = new SparseMatrix(A.n, A.n);
            
            for (int i = 0; i < A.n; i++)
            {
                lower.Rows[i] = new SparseVector(new double[0], new int[0], A.n);
                upper.Rows[i] = new SparseVector(new double[0], new int[0], A.n);
                
            }
            double sum = 0.0;
            valid = true;

            for (int i = 0; i < A.n; i++)
            {
                var row = new double[A.n];
                var column = new double[A.n];

                //Upper
                for (int j = i; j < A.n; j++)
                {
                    sum = 0.0;
                    var lrow = lower.Rows[i];
                    if (lrow.Index.Length > 0)
                    {
                        for (int k = 0; k < i; k++)
                        {
                            if (upper.Rows[k].Index.Length > 0 &&
                                lrow.Elements.TryGetValue(k, out double val1) &&
                                upper.Rows[k].Elements.TryGetValue(j, out double val2))
                            {
                                //Lower * Upper
                                sum += val1 * val2;
                            }
                        }
                    }

                    if (A.Rows[i].Elements.TryGetValue(j, out double val))
                        lu[i, j] = val - sum;
                    else
                        lu[i, j] = -sum;
                                        
                    row[j] = lu[i, j]; 
                }
                                
                upper.Rows[i] = SparseVector.GetSparseElement(row);
                   
                //Lower
                for (int j = i + 1; j < A.n; j++)
                {
                    sum = 0.0;
                    var lrow = lower.Rows[j];
                    if (lrow.Index.Length > 0)
                    {
                        for (int k = 0; k < i; k++)
                        {
                            if (upper.Rows[k].Index.Length > 0 &&
                                lrow.Elements.TryGetValue(k, out double val1) &&
                                upper.Rows[k].Elements.TryGetValue(i, out double val2))
                            {
                                //Lower * upper
                                sum += val1 * val2;
                            }
                        }
                    }

                    double v = 0.0;
                    if (lu[i, i] != 0.0)
                        v = 1.0 / lu[i, i];

                    if (A.Rows[j].Elements.TryGetValue(i, out double val))
                        lu[j, i] = v * (val - sum);
                    else
                        lu[j, i] = v * (-sum);
                                        
                    column[j] = lu[j, i];
                }
                column[i] = 1.0;
                SparseMatrix.SetColumn(ref lower, column, i);
            }

            double[] y = new double[A.n];
            for (int i = 0; i < A.n; i++)
            {
                sum = 0.0;
                for (int k = 0; k < i; k++)
                    //lower
                    sum += lu[i, k] * y[k];
                y[i] = b[i] - sum;
            }

            double[] x = new double[A.n];
            for (int i = A.n - 1; i >= 0; i--)
            {
                sum = 0.0;
                for (int k = i + 1; k < A.n; k++)
                    //upper
                    sum += lu[i, k] * x[k];

                double v = 0.0;
                if (lu[i, i] != 0.0)
                    v = 1.0 / lu[i, i];
                else
                    valid = false;
                
                x[i] = v * (y[i] - sum);
            }

            return x;

        }

        #endregion

    }
}
